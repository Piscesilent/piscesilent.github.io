<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on SilenT&#39;s Blog</title>
    <link>http://Piscesilent.github.io/tags/mysql/</link>
    <description>Recent content in Mysql on SilenT&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 01 Dec 2016 16:40:45 +0800</lastBuildDate>
    <atom:link href="http://Piscesilent.github.io/tags/mysql/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL 基准测试</title>
      <link>http://piscesilent.github.io/post/MySql_benchmark/</link>
      <pubDate>Thu, 01 Dec 2016 16:40:45 +0800</pubDate>
      
      <guid>http://piscesilent.github.io/post/MySql_benchmark/</guid>
      <description>

&lt;h2 id=&#34;前言说明&#34;&gt;前言说明&lt;/h2&gt;

&lt;p&gt;近期公司要求对线上使用的阿里云RDS做性能测试，经过一番调研，选用sysbench和mysqlslap这两个工具对线上数据库进行性能测试，本次测试数据库引擎均使用InnoDb。&lt;/p&gt;

&lt;p&gt;对于数据库测试，在各个性能指标中，应该着重关注以下几个点：&lt;/p&gt;

&lt;p&gt;(1)QPS(每秒Query量)&lt;/p&gt;

&lt;p&gt;每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，即每秒的响应请求数，大致相当于最大吞吐能力。&lt;/p&gt;

&lt;p&gt;其公式为：QPS = Queries / seconds&lt;/p&gt;

&lt;p&gt;(2)TPS(每秒事务量)&lt;/p&gt;

&lt;p&gt;一台数据库服务器在单位时间内处理的事务的个数，在实际使用环境下，一般倾向于尽量使用简单的SQL语句，所以可以理解为数据库的增删改吞吐量。&lt;/p&gt;

&lt;p&gt;其公式为：TPS = (Com_commit + Com_rollback) / seconds&lt;/p&gt;

&lt;p&gt;(3) CPU/内存使用量&lt;/p&gt;

&lt;p&gt;在实际使用中，可以通过这两个数据指示数据库负荷，在压测中，要保证CPU满载，其压测结果才真实有效。&lt;/p&gt;

&lt;h2 id=&#34;sysbench&#34;&gt;sysbench&lt;/h2&gt;

&lt;p&gt;sysbench是一款开源的多线程性能测试工具，可以用于对数据库进行简单的性能测试。&lt;/p&gt;

&lt;p&gt;sysbench项目地址：&lt;a href=&#34;https://github.com/akopytov/sysbench&#34;&gt;https://github.com/akopytov/sysbench&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;sysbench的部参数说明如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--oltp-table-size：指定表的行数
--mysql-host：数据库主机地址
--mysql-user：数据库账号，使用高权限帐号
--mysql-passwor：数据库密码
--mysql-table-engine：指定存储引擎，本次测试使用InnoDb
--mysql-db：指定在哪个数据库创建测试表
--test：指定Lua脚本, 本次使用官方默认oltp
--db-driver：指定数据库驱动
--num-threads：指定并发线程数
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在进行测试前，首先准备数据，使用以下命令进行数据的准备：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sysbench --test=oltp --oltp-table-size=10000 --oltp-table-name=test \
--mysql-table-engine=innodb \
--mysql-host=host \
--mysql-db=test \
--mysql-user=user \
--mysql-password=password \
--db-driver=mysql \
prepare
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;随后会在制定数据库中生成一张测试表，其基本结构和填充内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select * from test limit 1;
+----+---+---+----------------------------------------------------+
| id | k | c | pad                                                |
+----+---+---+----------------------------------------------------+
|  1 | 0 |   | qqqqqqqqqqwwwwwwwwwweeeeeeeeeerrrrrrrrrrtttttttttt |
+----+---+---+----------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后运行以下命令开始任务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sysbench --test=oltp --oltp-table-size=10000 --oltp-table-name=test \
--mysql-table-engine=innodb \
--mysql-host=host \
--mysql-db=test \
--mysql-user=user \
--mysql-password=password \
--db-driver=mysql \
--num-threads=8 \
run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;经过了一段时间的测试，其结果显示如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OLTP test statistics:
    queries performed:
        read:                            140000
        write:                           50000
        other:                           20000
        total:                           210000
    transactions:                        10000  (951.74 per sec.)
    deadlocks:                           0      (0.00 per sec.)
    read/write requests:                 190000 (18083.06 per sec.)
    other operations:                    20000  (1903.48 per sec.)

Test execution summary:
    total time:                          10.5071s
    total number of events:              10000
    total time taken by event execution: 1996.0691
    per-request statistics:
         min:                                 40.74ms
         avg:                                199.61ms
         max:                               1304.29ms
         approx.  95 percentile:             491.18ms

Threads fairness:
    events (avg/stddev):           50.0000/4.50
    execution time (avg/stddev):   9.9803/0.10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在输出的结果中，read表示总查询语句，write表示总增删改语句，其中transactions应该重点关注，括号内的数值即代表TPS。对于QPS而言，可以通过queries performed中的total参数除以Test execution summary中的total time获得。对于per-request statistics中的参数，可以重点关注avg（平均执行时间），以及approx.  95 percentile（95%置信区间内的语句执行时间的最大值）。&lt;/p&gt;

&lt;p&gt;最后使用以下语句清除临时数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sysbench --test=oltp --oltp-table-size=10000 --oltp-table-name=test \
--mysql-table-engine=innodb \
--mysql-host=host \
--mysql-db=test \
--mysql-user=user \
--mysql-password=password \
--db-driver=mysql \
cleanup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在使用sysbench进行测试时，出现一些奇怪的现象，在使用官方脚本时，如果测试表行数过小，会出现很多死锁的情况。在这里建议尽量使用大表进行测试，其官方脚本在大表中的测试成绩和在小表中并无数量级的差距。&lt;/p&gt;

&lt;h2 id=&#34;mysqlslap&#34;&gt;mysqlslap&lt;/h2&gt;

&lt;p&gt;在使用了sysbench进行基准测试之后，应该对常用的语句进行一个基准测试，这类测试应根据每个系统实际使用情况，选取出具有代表性的语句进行有针对性的测试。这在指导开发工作中如何选用正确的SQL语句有相当大的作用。&lt;/p&gt;

&lt;p&gt;对于常用的单条语句测试，选用MySQL自带的工具mysqlslap，就可以很好的达到测试目的。在测试过程中，本次选用了数据库已经存在的表进行测试，对于没有这么大数据量的表的同学，以下给出一个创建测试表和测试数据的方法供大家参考：&lt;/p&gt;

&lt;p&gt;首先创建测试表：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `test_10k` (
  `id` VARCHAR(64) NOT NULL,
  `title` VARCHAR(255) DEFAULT &#39;&#39;,
  `del_flag` TINYINT(1) DEFAULT 0,
  `longitude` DOUBLE DEFAULT 0.0,
  `sum` int(11) DEFAULT &#39;0&#39;,
  `create_date` DATETIME DEFAULT NOW(),
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来使用存储过程生成测试数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delimiter $$ 
SET AUTOCOMMIT = 0$$
create  procedure create_random_date_10k()  
begin
declare v_cnt decimal (10)  default 0; 
dd:loop            
        INSERT INTO test_10k VALUE         
        (REPLACE(UUID(),&#39;-&#39;,&#39;&#39;),CONCAT(&#39;测试&#39;,UUID()),0,RAND()*100,FLOOR(100000*RAND()),NOW()),       
        (REPLACE(UUID(),&#39;-&#39;,&#39;&#39;),CONCAT(&#39;测试&#39;,UUID()),0,RAND()*100,FLOOR(100000*RAND()),NOW()),        
        (REPLACE(UUID(),&#39;-&#39;,&#39;&#39;),CONCAT(&#39;测试&#39;,UUID()),0,RAND()*100,FLOOR(100000*RAND()),NOW()),
        (REPLACE(UUID(),&#39;-&#39;,&#39;&#39;),CONCAT(&#39;测试&#39;,UUID()),0,RAND()*100,FLOOR(100000*RAND()),NOW()),        
        (REPLACE(UUID(),&#39;-&#39;,&#39;&#39;),CONCAT(&#39;测试&#39;,UUID()),0,RAND()*100,FLOOR(100000*RAND()),NOW()),         
        (REPLACE(UUID(),&#39;-&#39;,&#39;&#39;),CONCAT(&#39;测试&#39;,UUID()),1,RAND()*100,FLOOR(100000*RAND()),NOW()),        
        (REPLACE(UUID(),&#39;-&#39;,&#39;&#39;),CONCAT(&#39;测试&#39;,UUID()),1,RAND()*100,FLOOR(100000*RAND()),NOW()),       
        (REPLACE(UUID(),&#39;-&#39;,&#39;&#39;),CONCAT(&#39;测试&#39;,UUID()),1,RAND()*100,FLOOR(100000*RAND()),NOW()),         
        (REPLACE(UUID(),&#39;-&#39;,&#39;&#39;),CONCAT(&#39;测试&#39;,UUID()),1,RAND()*100,FLOOR(100000*RAND()),NOW()),        
        (REPLACE(UUID(),&#39;-&#39;,&#39;&#39;),CONCAT(&#39;测试&#39;,UUID()),1,RAND()*100,FLOOR(100000*RAND()),NOW());                 
        commit;              
        set v_cnt = v_cnt+10;                            
            if  v_cnt = 10000 then leave dd;                           
            end if;          
        end loop dd ; 
end;$$ 
delimiter ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;随后调用写好的存储过程：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;call create_random_date_10k;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于mysqlslap命令的使用，可以参考官方文档：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.mysql.com/doc/refman/5.6/en/mysqlslap.html&#34;&gt;http://dev.mysql.com/doc/refman/5.6/en/mysqlslap.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这边列出一些常用的参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--concurrency：代表并发数量，多个可以用逗号隔开，concurrency=10,50,100, 并发连接线程数分别是10、50、100个并发。
--engines：代表要测试的引擎。
--iterations：代表要循环执行的次数。
--number-of-queries：一次测试代表执行语句的总数
--create-schema：需要测试的schema。
--query 使用自定义脚本执行测试，例如可以调用自定义的一个存储过程或者sql语句来执行测试。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例子如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqlslap -hhost -uuser -ppassword --concurrency=100 --iterations=1 --create-schema=&#39;test&#39; --query=&#39;select * from test_10k;&#39; --number-of-queries=10000 --debug-info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其打印的结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Benchmark
    Average number of seconds to run all queries: 11.221 seconds
    Minimum number of seconds to run all queries: 11.221 seconds
    Maximum number of seconds to run all queries: 11.221 seconds
    Number of clients running queries: 100
    Average number of queries per client: 10


User time 4.62, System time 3.98
Maximum resident set size 123172, Integral resident set size 0
Non-physical pagefaults 155744, Physical pagefaults 11, Swaps 0
Blocks in 1944 out 0, Messages in 0 out 0, Signals 0
Voluntary context switches 153923, Involuntary context switches 5693
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要计算QPS，可以通过（number-of-queries * iterations）除以结果中的Average number of seconds to run all queries秒数。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL索引优化总结（二）</title>
      <link>http://piscesilent.github.io/post/mysql_index_2/</link>
      <pubDate>Thu, 01 Sep 2016 00:15:23 +0800</pubDate>
      
      <guid>http://piscesilent.github.io/post/mysql_index_2/</guid>
      <description>

&lt;p&gt;在优化数据库索引中，了解到在新版本的MySQL中，有两个比较重要的新技术，Push down 和 Index merge。于是查了资料做了一些总结。&lt;/p&gt;

&lt;h1 id=&#34;push-down&#34;&gt;Push down&lt;/h1&gt;

&lt;p&gt;索引下推（Index Condition Pushdown）用于优化MySQL通过索引检索表的过程。&lt;/p&gt;

&lt;p&gt;如果没有ICP，存储引擎会遍历索引去定位表中的行，并返回给MySQL服务器。开启ICP后，如果在查询的WHERE条件中有部分条件可以使用索引，那么MySQL服务器会下推这部分索引到存储引擎，然后通过索引过滤的WHERE条件在存储引擎层进行数据过滤,而非将所有通过索引access到的结果传递到MySQL服务器层进行WHERE过滤。&lt;/p&gt;

&lt;p&gt;当使用Push down时：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获取下一行的索引元组(但不是完整的行)。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;尝试只使用索引列检查是否符合条件。如果条件不满足,回到步骤1。只有满足条件才会回表读取数据。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果满足下推的索引条件，存储引擎通过索引元组定位和读取整行数据并返回给MySQL服务层。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MySQL服务层评估没有被下推到存储引擎的WHERE条件，如果该行数据满足WHERE条件则使用，然后回到步骤1。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://raw.githubusercontent.com/Piscesilent/pic-store/master/mysql_pushdown.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果没有使用该技术的情况下，会在读取索引元组之后直接在表中定位读取整行数据。&lt;/p&gt;

&lt;p&gt;在一个测试表中建立一个索引：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ALTER TABLE `cms_article` 
ADD INDEX `TEST_INDEX` (`audit_status` ASC, `create_by` ASC, `update_by` ASC);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开启Push down后：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; set optimizer_switch = &amp;quot;index_condition_pushdown=on&amp;quot;;
mysql&amp;gt; explain select * from cms_article where audit_status = 0 and update_by = &#39;1&#39;\G;
******** 1. row ********
           id: 1
  select_type: SIMPLE
        table: cms_article
         type: ref
possible_keys: TEST_INDEX
          key: TEST_INDEX
      key_len: 5
          ref: const
         rows: 735
        Extra: Using index condition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对比开启前：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; set optimizer_switch = &amp;quot;index_condition_pushdown=off&amp;quot;;
mysql&amp;gt; explain select * from cms_article where audit_status = 0 and update_by = &#39;1&#39;\G;
******** 1. row ********
           id: 1
  select_type: SIMPLE
        table: cms_article
         type: ref
possible_keys: TEST_INDEX
          key: TEST_INDEX
      key_len: 5
          ref: const
         rows: 735
        Extra: Using where
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出即使搜索条件不符合联合索引的最左匹配原则，但是MySQL还是对搜索进行了优化。&lt;/p&gt;

&lt;h1 id=&#34;index-merge&#34;&gt;Index merge&lt;/h1&gt;

&lt;p&gt;在多个列上建立独立的单列索引在之前并不会提高查询速度，因为每次查询只会使用到一个索引。但是在索引合并（Index merge）技术下，可以做到最大限度利用多个索引定位行。&lt;/p&gt;

&lt;p&gt;索引合并有三种情况：OR条件的Union，AND条件的Intersection，OR和AND条件的组合Union&amp;amp;Intersection。Index merge其实就是分别通过对两个独立的索引进行过滤之后，将过滤之后的结果聚合在一起，然后在返回结果集。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; explain select * from cms_article where proprietary_id = &#39;345345&#39; or del_flag = 0 and audit_status = 0 \G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: cms_article
         type: index_merge
possible_keys: INDEX_PRO,INDEX_DEL_AUDIT
          key: INDEX_PRO,INDEX_DEL_AUDIT
      key_len: 259,10
          ref: NULL
         rows: 734
        Extra: Using union(INDEX_PRO,INDEX_DEL_AUDIT); Using where
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其type表明使用了索引合并，且在Extra中详细说明了合并方式。这里的OR条件就是利用了一个union方式的索引合并，将 &lt;code&gt;INDEX_PRO&lt;/code&gt; 和 &lt;code&gt;INDEX_DEL_AUDIT&lt;/code&gt; 合并后共同计算返回结果。&lt;/p&gt;

&lt;p&gt;虽然是一个优化技术，但索引合并更多时候说明了表上的索引创建有问题，在《高性能MySQL》中给出了理由：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当对多个索引进行相交操作时，通常需要一个包含所有相关项的多列索引，而不是多个独立的单个索引。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当对多个索引进行联合操作时，需要耗费大量资源进行索引合并，特别是索引选择性不高的情况下，需要扫描并返回大量的数据进行计算。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在并发大的情况下谨慎使用Index merge。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;参考文档&#34;&gt;参考文档：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/en/index-condition-pushdown-optimization.html&#34; title=&#34;https://dev.mysql.com/doc/refman/5.6/en/index-condition-pushdown-optimization.html&#34;&gt;https://dev.mysql.com/doc/refman/5.6/en/index-condition-pushdown-optimization.html
&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;《高性能MySQL（第三版）》&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>MySQL索引优化总结（一）</title>
      <link>http://piscesilent.github.io/post/mysql_index_1/</link>
      <pubDate>Tue, 30 Aug 2016 11:53:21 +0800</pubDate>
      
      <guid>http://piscesilent.github.io/post/mysql_index_1/</guid>
      <description>

&lt;h1 id=&#34;explain命令&#34;&gt;Explain命令&lt;/h1&gt;

&lt;p&gt;explain用于获取查询相关的执行计划信息，在这个命令中可以知晓查询是如何执行的。&lt;/p&gt;

&lt;p&gt;使用explain也很简单，只需要在所需分析的语句前加上explain执行即可。其输出结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;******** 1. row ********
           id: 1
  select_type: SIMPLE
        table: cms_article
         type: ref
possible_keys: INDEX_CREATE
          key: INDEX_CREATE
      key_len: 259
          ref: const
         rows: 1
        Extra: Using index condition
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;id&#34;&gt;id&lt;/h2&gt;

&lt;p&gt;这一列用于标识查询编号，如果没有子查询，那么每个索引都会标识为1。&lt;/p&gt;

&lt;h2 id=&#34;select-type&#34;&gt;select_type&lt;/h2&gt;

&lt;p&gt;这行标识了SELECT的类型，即简单查询还是复杂查询&lt;/p&gt;

&lt;p&gt;SIMPLE：查询中不包含子查询和UNION查询，即简单查询&lt;/p&gt;

&lt;p&gt;对于复杂查询&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;explain select v.id from (select id from cms_article where create_by = &#39;1&#39;) v \G;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;explain后会出现多行数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;************ 1. row ***********
           id: 1
  select_type: PRIMARY
        table: &amp;lt;derived2&amp;gt;
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 2
        Extra: NULL
************ 2. row ************
           id: 2
  select_type: DERIVED
        table: cms_article
         type: ref
possible_keys: INDEX_CREATE
          key: INDEX_CREATE
      key_len: 259
          ref: const
         rows: 1
        Extra: Using where; Using index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最外一层总是PRIMARY。&lt;/p&gt;

&lt;p&gt;PRIMARY：表示复杂查询的最外层&lt;/p&gt;

&lt;p&gt;DERIVED：用于表示包含在FROM子句中的子查询&lt;/p&gt;

&lt;p&gt;UNION：UNION中的第二个或后面的SELECT语句&lt;/p&gt;

&lt;p&gt;SUBQUERY：子查询中的SELECT（不在FROM子句中）&lt;/p&gt;

&lt;h2 id=&#34;table&#34;&gt;table&lt;/h2&gt;

&lt;p&gt;用于标识查询对应的表，结合id可以看出查询的关联顺序&lt;/p&gt;

&lt;h2 id=&#34;type&#34;&gt;type&lt;/h2&gt;

&lt;p&gt;这个属性决定了MySQL如何查找表中的行，也是索引优化的中应该关注的最重要的属性。从差到优，依次为：&lt;/p&gt;

&lt;h3 id=&#34;all&#34;&gt;all&lt;/h3&gt;

&lt;p&gt;代表全表扫描，通常是最差的情况&lt;/p&gt;

&lt;h3 id=&#34;index&#34;&gt;index&lt;/h3&gt;

&lt;p&gt;按索引次序读取表中数据，最差的情况是按索引的次序读取整个表的数据，这样读取的开销会相当大，因为此时是按照随机的次序去取表中的数据，甚至于比全表扫描效率还低。&lt;/p&gt;

&lt;h3 id=&#34;range&#34;&gt;range&lt;/h3&gt;

&lt;p&gt;范围扫描，即有限制的INDEX扫描，通常是带有范围搜索条件时出现。&lt;/p&gt;

&lt;p&gt;在通常情况下，优化器会在索引存在的情况下，通过符合 RANGE 范围的条数和总数的比例来选择是使用索引还是进行全表遍历。当需要读取的数据超过一个临界值时，优化器会放弃从索引中读取而改为进行全表扫描，这是为了避免过多的 random disk。&lt;/p&gt;

&lt;p&gt;所以有时候会看到使用范围查询时，即使在该字段上建有索引，其type却是ALL的原因。&lt;/p&gt;

&lt;h3 id=&#34;ref&#34;&gt;ref&lt;/h3&gt;

&lt;p&gt;索引查找，返回的是所有匹配某个单值的行，一般而言在优化得当的SQL查询中，其访问方式多为ref。&lt;/p&gt;

&lt;h3 id=&#34;eq-ref&#34;&gt;eq_ref&lt;/h3&gt;

&lt;p&gt;和ref类似，只有使用唯一索引或使用主键查找才会出现，其效率比ref更高。&lt;/p&gt;

&lt;h3 id=&#34;const-system&#34;&gt;const, system&lt;/h3&gt;

&lt;p&gt;说明MySQL能将查询转换为常量&lt;/p&gt;

&lt;h3 id=&#34;null&#34;&gt;NULL&lt;/h3&gt;

&lt;p&gt;MySQL能在优化阶段分解查询语句，执行阶段甚至不用再访问表或索引。&lt;/p&gt;

&lt;h2 id=&#34;possible-keys&#34;&gt;possible_keys&lt;/h2&gt;

&lt;p&gt;指出本次查询可以使用哪些索引，这一列是在优化过程早期创建的，有些索引对于后续的优化过程是没用的。&lt;/p&gt;

&lt;h2 id=&#34;key&#34;&gt;key&lt;/h2&gt;

&lt;p&gt;显示MySQL实际决定使用的索引。如果没有选择索引，键是NULL。&lt;/p&gt;

&lt;h2 id=&#34;key-len&#34;&gt;key_len&lt;/h2&gt;

&lt;p&gt;显示了MySQL在索引里使用的字节数。&lt;/p&gt;

&lt;h2 id=&#34;ref-1&#34;&gt;ref&lt;/h2&gt;

&lt;p&gt;显示使用哪个列（或常数）与key一起从表中选择行。&lt;/p&gt;

&lt;h2 id=&#34;rows&#34;&gt;rows&lt;/h2&gt;

&lt;p&gt;MySQL估计为了找到所需的行而要读取的行数。这个值虽然不是最终要从表里读取数据的行数，但是也能反映出索引对查询条件的覆盖率。&lt;/p&gt;

&lt;h2 id=&#34;extra&#34;&gt;Extra&lt;/h2&gt;

&lt;p&gt;这里显示了一些重要的额外信息，对于索引优化工作，首先需要关注以下几个额外信息：&lt;/p&gt;

&lt;h3 id=&#34;using-index&#34;&gt;Using index&lt;/h3&gt;

&lt;p&gt;当在Extra列中显示这个信息时，这表明此次查询没有访问表，因为在索引中已经有足够的数据。所以，可以把这个当作&amp;rdquo;Using index only&amp;rdquo;。这里有一点需要注意的是，当使用聚集索引时（通常是主键的默认索引），尽管查询只扫描了索引，但在Extra中并不会显示&amp;rdquo;Using index&amp;rdquo;。&lt;/p&gt;

&lt;h3 id=&#34;using-index-condition&#34;&gt;Using index condition&lt;/h3&gt;

&lt;p&gt;当出现这个信息时表明，本次查询首先会访问索引进行搜索过滤，然后从索引中得到结果后再进行回表查询。这里使用了push down技术，具体可以参考官方文档：
&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/en/index-condition-pushdown-optimization.html&#34;&gt;https://dev.mysql.com/doc/refman/5.6/en/index-condition-pushdown-optimization.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>